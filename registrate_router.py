import logging
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram import Router
import re
from request import req
from keyboards import reg_kb, phone_kb, type_of_funds_kb, types_kb, budget_kb


class Reg(StatesGroup):
    name = State()
    number = State()
    city = State()
    type = State()
    budget = State()
    type_of_funds = State()
    detail = State()
    district = State()


reg_router = Router()


async def reg_1(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await message.delete()
        await state.set_state(Reg.name)
        await message.answer("–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ üìÉ")
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚úçÔ∏è")
    except Exception as err: 
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_1: {err}")


@reg_router.message(Reg.name)
async def reg_2(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –§–ò–û"""
    try:
        pattern = r'^[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+\s[–ê-–Ø–Å–∞-—è—ë]+$'
        if not re.match(pattern, message.text):
            await message.reply(
                "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        await state.update_data(name=message.text.title())
        await state.set_state(Reg.number)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", reply_markup=phone_kb)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_2: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@reg_router.message(Reg.number)
async def reg_3(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞"""
    try:
        pattern = r'^(\+7|7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}$'
        if message.contact:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
            phone_number = message.contact.phone_number
            if not re.match(pattern, phone_number):
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX, 7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=phone_kb)
                return
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –≤—Ä—É—á–Ω—É—é
            if not re.match(pattern, message.text):
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX, 7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX "
                    "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=phone_kb
                )
                return
            phone_number = message.text
        await state.update_data(number=phone_number)
        await state.set_state(Reg.city)
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞ üåÜ", reply_markup=ReplyKeyboardRemove())
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_3: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=phone_kb)


@reg_router.message(Reg.city)
async def reg_4(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞"""
    try:
        pattern = r'^[–ê-–Ø–Å–∞-—è—ë\s-]+$'
        if not re.match(pattern, message.text):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            return
        await state.update_data(city=message.text.title())
        await state.set_state(Reg.type)
        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏? üè°", reply_markup=types_kb)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_4: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@reg_router.message(Reg.type)
async def reg_5(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞"""
    try:
        if message.text.lower() not in [
            "–¥–æ–º", "–∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫", "—É—á–∞—Å—Ç–æ–∫",
            "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã", "–∞–ø–∞—Ä—Ç—ã", "–¥—Ä—É–≥–æ–µ"
        ]:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=types_kb)
            return
        await state.update_data(type=message.text.title())
        print(message.text.title())
        await state.set_state(Reg.budget)
        await message.answer("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É? üíµ (–≤ –º–ª–Ω. —Ä—É–±.)", reply_markup=budget_kb)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_5: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types_kb)


@reg_router.message(Reg.budget)
async def reg_6(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞"""
    try:
        if message.text in [
            "5 - 10", "10 - 15", "15 - 20", "20 - 25", "25 - 30", "30 - 40", "40 - 50", "–°–≤—ã—à–µ 50"
        ]:
            await state.update_data(budget=message.text.title())
        else:
            try:
                user_budget = int(message.text)
                if 5 <= user_budget <= 300:
                    await state.update_data(budget=user_budget)
                else:
                    await message.reply(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                        reply_markup=budget_kb
                    )
                    return
            except ValueError:
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                    reply_markup=budget_kb
                )
                return
        await state.set_state(Reg.type_of_funds)
        await message.answer("–ò–ø–æ—Ç–µ–∫–∞ –∏–ª–∏ –ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?", reply_markup=type_of_funds_kb)
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_6: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=budget_kb)


@reg_router.message(Reg.type_of_funds)
async def reg_7(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        if message.text.lower() not in ["–∏–ø–æ—Ç–µ–∫–∞", "–ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", "–ª–∏—á–Ω—ã–µ", "–Ω–∞–ª", "–Ω–∞–ª–∏—á–∫–∞", "–¥—Ä—É–≥–æ–µ"]:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=type_of_funds_kb)
            return
        await state.update_data(type_of_funds=message.text.title())
        await state.set_state(Reg.detail)
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ ‚úçÔ∏è",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_7: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=type_of_funds_kb)


@reg_router.message(Reg.detail)
async def reg_8(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
    try:
        if message.photo or message.document:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.")
            return
        await state.update_data(detail=message.text.lower())
        await state.set_state(Reg.district)
        await message.answer("–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –°–æ—á–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?")
    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_8: {err}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@reg_router.message(Reg.district)
async def reg_9(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ä–∞–π–æ–Ω–∞"""
    try:
        if any ([message.text.isdigit(), message.photo, message.document]):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞.")
            return
        await state.update_data(district=message.text.title())
        data = await state.get_data()
        path_video = '/root/bots/deploy_bot/video.mp4'
        await message.answer_video_note(video_note=FSInputFile(path=path_video))
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n–Ø —É–∂–µ –∏—â—É –ª—É—á—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–º–∏ üëå",
            reply_markup=reg_kb
        )

        req(data["name"],
            data["number"],
            data["city"],
            data["type"],
            data["budget"],
            data["type_of_funds"],
            data["detail"],
            data["district"])
        await state.clear()

    except Exception as err:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ reg_9: {err}")
