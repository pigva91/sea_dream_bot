import logging

from keyboards import main_kb
from registrate_router import reg_1, reg_router
from call_router import callback_router
from config import settings
from sqlbd import *

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

dp = Dispatcher()
bot = Bot(token=settings.TOKEN.get_secret_value())


@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É."""
    user_id = message.from_user.id
    logging.info(f"UserID={user_id}, UserNick={message.from_user.username}, UserFullName={message.from_user.full_name}")
    count = check_id(user_id)

    if count > 0:
        await message.answer(text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Ä–∞–¥ –í–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚§µÔ∏è", reply_markup=main_kb)
    else:
        insert_id(user_id)

        # –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        text = ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±—É–¥—É—â–∏–π –æ–±–ª–∞–¥–∞—Ç–µ–ª—å –¥–æ–º–∞ –º–µ—á—Ç—ã —É –º–æ—Ä—è ü§ù\n\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ '–ù–ê–ó–í–ê–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò', "
                "–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–Ω–µ –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–µ –ª—É—á—à–µ–º—É –±—Ä–æ–∫–µ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–Ω —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –Ω–∞ "
                "–≥–ª–∞–≤–Ω–æ–º –∫—É—Ä–æ—Ä—Ç–µ —Å—Ç—Ä–∞–Ω—ã üèùÔ∏è")
        await message.answer(text=text)
        await reg_1(message, state)


@dp.message(Command("site"))
async def site(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏."""
    # –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏
    await message.answer(text="–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç üëá\n'–°–°–´–õ–ö–ê –ù–ê –°–ê–ô–¢'")


@dp.message(Command("chat"))
async def site(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏."""
    # –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏
    await message.answer(text="–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —á–∞—Ç üëá\n'–°–°–´–õ–ö–ê –ù–ê –¢–ì-–ß–ê–¢'")


@dp.message(Command("application"))
async def site(message: Message, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ–æ—Ä–º—É."""
    await reg_1(message, state)


async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        create_table()
        dp.include_routers(reg_router, callback_router)
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as err:
        logging.error(err)


if __name__ == "__main__":
    try:
        logging.basicConfig(filename="py_log.log", level=logging.INFO,
                            format=" %(asctime)s - %(""levelname)s - %(message)s")
        asyncio.run(main())
    except KeyboardInterrupt as err:
        logging.error("BOT OFF")
